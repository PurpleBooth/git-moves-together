name: Test
on:
  push:
    branches:
    - '*'
  pull_request:
  workflow_dispatch:
jobs:
  lint-markdown:
    uses: PurpleBooth/common-pipelines/.github/workflows/markdown-check.yml@v0.2.0
  commit-checks:
    uses: PurpleBooth/common-pipelines/.github/workflows/commit-check.yml@v0.2.0
  rust-checks:
    uses: PurpleBooth/common-pipelines/.github/workflows/rust-check.yml@v0.2.0
    with:
      run_on_windows: false

  specdown:
    uses: PurpleBooth/common-pipelines/.github/workflows/specdown-check.yml@v0.2.0
    with:
      run_on_windows: false

  release:
    if: github.ref == 'refs/heads/v0.2.0'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: ${{ github.actor }}
    needs:
    - commit-checks
    - specdown
    - lint-markdown
    - rust-checks
    outputs:
      version_bump: ${{ steps.version_bump.outputs.version_bump }}
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
    - uses: chaaz/versio-actions/install@v1.2
      name: Install versio
    - id: previous_version
      run: echo ::set-output "name=previous_version::$( versio get --id 1 -v )"
    - run: echo ::set-output "name=BUMP::$( versio release --dry-run )"
      id: get_versio_plan
    - name: Generate release
      if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
      run: |
        versio release
    - run: echo ::set-output "name=current_version::$( versio get --id 1 -v )"
      id: current_version
    - run: echo ::set-output "name=version_bump::true"
      if: steps.current_version.outputs.current_version != steps.previous_version.outputs.previous_version
      id: version_bump

  release-binary:
    if: needs.release.outputs.version_bump
    needs:
    - release
    uses: PurpleBooth/common-pipelines/.github/workflows/release-rust-binary.yml@v0.2.0
    with:
      current_version: ${{ needs.release.outputs.current_version }}
      previous_version: ${{ needs.release.outputs.previous_version }}
      run_on_windows: false
    secrets:
      committer_token: ${{ secrets.COMMITTER_TOKEN }}
      gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
