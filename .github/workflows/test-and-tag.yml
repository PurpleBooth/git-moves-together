name: Test
on:
  push:
    branches:
    - '*'
  pull_request:
  workflow_dispatch:
jobs:
  lint-markdown:
    uses: PurpleBooth/common-pipelines/.github/workflows/markdown-check.yml@main
  commit-checks:
    uses: PurpleBooth/common-pipelines/.github/workflows/commit-check.yml@main
  rust-checks:
    uses: PurpleBooth/common-pipelines/.github/workflows/rust-check.yml@main
    with:
      run_on_windows: false

  specdown:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: macos-latest
        - os: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: actions/cache@v2.1.6
      with:
        path: |
          .cache
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - run: brew install specdown/repo/specdown
      name: Download Specdown
    - uses: actions-rs/toolchain@v1.0.7
      with:
        profile: minimal
        toolchain: stable
        default: true
    - run: make specdown
  release:
    if: github.ref == 'refs/heads/main'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: ${{ github.actor }}
    needs:
    - commit-checks
    - specdown
    - lint-markdown
    - rust-checks
    outputs:
      version_bump: ${{ steps.version_bump.outputs.version_bump }}
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
    - uses: chaaz/versio-actions/install@v1.2
      name: Install versio
    - id: previous_version
      run: echo ::set-output "name=previous_version::$( versio get --id 1 -v )"
    - run: echo ::set-output "name=BUMP::$( versio release --dry-run )"
      id: get_versio_plan
    - name: Generate release
      if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
      run: |
        versio release
    - run: echo ::set-output "name=current_version::$( versio get --id 1 -v )"
      id: current_version
    - run: echo ::set-output "name=version_bump::true"
      if: steps.current_version.outputs.current_version != steps.previous_version.outputs.previous_version
      id: version_bump

  release-binary:
    if: needs.release.outputs.version_bump
    needs:
      - release
    uses: PurpleBooth/common-pipelines/.github/workflows/release-rust-binary.yml@main
    with:
      current_version: ${{ needs.release.outputs.current_version }}
      run_on_windows: false
    secrets:
      committer_token: ${{ secrets.COMMITTER_TOKEN }}
      gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
